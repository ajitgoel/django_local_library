cd django-projects
cd locallibrary

using a virtual environment:
workon my_django_environment
deactivate 

Running database migrations
The makemigrations command creates (but does not apply) the migrations for all applications installed in your project (you can specify the application name as well to just run a migration for a single project). 
py manage.py makemigrations
The migrate command actually applies the migrations to your database (Django tracks which ones have been added to the current database).
py manage.py migrate

Running the website
py manage.py runserver --insecure

Getting your website ready to publish
set DJANGO_DEBUG=False
py manage.py check --deploy

How to run the tests:
py manage.py test

create Requirements file:
pip3 freeze > requirements.txt

Git commands:
git add -A
git commit -m "Added files and changes required for deployment to heroku"
git push origin master

Create and upload the website to Heroku:
heroku create
git push heroku master
heroku run python manage.py migrate
heroku run python manage.py createsuperuser
heroku open

Managing addons:
heroku addons
heroku addons:open heroku-postgresql

Setting configuration variables:
heroku config

Debugging Section
heroku logs # Show current logs
heroku logs --tail # Show current logs and keep updating with any new results
# Add additional logging for collectstatic (this tool is run automatically during a build)
heroku config:set DEBUG_COLLECTSTATIC=1
heroku ps # Display dyno status